---
title: "Data Visualization Dashboard"
logo: assets/city-of-norfolk.png
format: dashboard

theme: 
  - cosmo
  - assets/styles/custom.scss
  - assets/styles/quarto.scss

execute: 
  echo: false
---

```{r setup, include = FALSE}
library(dplyr)
library(ggplot2)
library(forcats)
```

```{r}
library(haven)
data <- read_spss("/Users/nelliechen/Desktop/IDA meeting/ELS variable undated 2.13.21.sav")
library(readr)

els <- data[, c("STU_ID", "SCH_ID", "F1S18A", "F1S18B", "F1S18C", "F1S18D",
                "F1S18E", "Male", "SES_Grp", "Asian", "Black", "Hispanic", "Other")]

els_labs <- c("stu_id", "sch_id", "excellentTests", "understandTexts", "understandClass",
              "excellentAssign", "masterSkills",  "Male", "SES_Grp", "Asian", "Black", "Hispanic", "Other")
colnames(els) <- els_labs
```

# ELS
## Row {height=40%}
### Column {.tabset width="70%"}
```{r} 
#| title: Excellent Test
library(tidyr)
library(dplyr)
library(ggplot2)

# bar graph for each item
# excellent test 
library(ggplot2)
library(dplyr)

# Calculate mean and median
mean_value <- mean(els$excellentTests, na.rm = TRUE)
median_value <- median(els$excellentTests, na.rm = TRUE)

# Create the bar graph
ggplot(els, aes(x = as.factor(excellentTests))) + 
  geom_bar(fill = "darkseagreen3", color = "darkseagreen3") +
  labs(title = "Bar Graph of Excellent Test Scores", 
       x = "Excellent Test Scores", 
       y = "Count") +
  geom_text(aes(label = ..count..), stat = 'count', position = position_stack(vjust = 0.5), color = "white") + # Add count labels
  annotate("text", x = Inf, y = Inf, label = paste("Mean:", round(mean_value, 2)), hjust = 1.1, vjust = 2, size = 4, color = "black") + # Add mean label
  annotate("text", x = Inf, y = Inf, label = paste("Median:", median_value), hjust = 1.1, vjust = 1, size = 4, color = "black") # Add median label
```

```{r} 
#| title: Understand Text
library(ggplot2)
library(dplyr)

# Calculate mean and median for understandTexts
mean_understandTexts <- mean(els$understandTexts, na.rm = TRUE)
median_understandTexts <- median(els$understandTexts, na.rm = TRUE)

# Create the bar graph for understandTexts
ggplot(els, aes(x = as.factor(understandTexts))) + 
  geom_bar(fill = "darkseagreen3", color = "darkseagreen3") +
  labs(title = "Bar Graph of Understanding Texts Scores", 
       x = "Understanding Texts Scores", 
       y = "Count") +
  geom_text(aes(label = ..count..), stat = 'count', position = position_stack(vjust = 0.5), color = "white") +
  annotate("text", x = Inf, y = Inf, label = paste("Mean:", round(mean_understandTexts, 2)), hjust = 1.1, vjust = 2, size = 4, color = "black") +
  annotate("text", x = Inf, y = Inf, label = paste("Median:", median_understandTexts), hjust = 1.1, vjust = 1, size = 4, color = "black")
```

```{r}
#| title: Understand Class
# Calculate mean and median for understandClass
mean_understandClass <- mean(els$understandClass, na.rm = TRUE)
median_understandClass <- median(els$understandClass, na.rm = TRUE)

# Create the bar graph for understandClass
ggplot(els, aes(x = as.factor(understandClass))) + 
  geom_bar(fill = "darkseagreen3", color = "darkseagreen3") +
  labs(title = "Bar Graph of Understanding Class Material Scores", 
       x = "Understanding Class Material Scores", 
       y = "Count") +
  geom_text(aes(label = ..count..), stat = 'count', position = position_stack(vjust = 0.5), color = "white") +
  annotate("text", x = Inf, y = Inf, label = paste("Mean:", round(mean_understandClass, 2)), hjust = 1.1, vjust = 2, size = 4, color = "black") +
  annotate("text", x = Inf, y = Inf, label = paste("Median:", median_understandClass), hjust = 1.1, vjust = 1, size = 4, color = "black")
```

```{r}
#| title: Excellent Assignment
# Calculate mean and median for excellentAssign
mean_excellentAssign <- mean(els$excellentAssign, na.rm = TRUE)
median_excellentAssign <- median(els$excellentAssign, na.rm = TRUE)

# Create the bar graph for excellentAssign
ggplot(els, aes(x = as.factor(excellentAssign))) + 
  geom_bar(fill = "darkseagreen3", color = "darkseagreen3") +
  labs(title = "Bar Graph of Excellent Assignment Scores", 
       x = "Excellent Assignment Scores", 
       y = "Count") +
  geom_text(aes(label = ..count..), stat = 'count', position = position_stack(vjust = 0.5), color = "white") +
  annotate("text", x = Inf, y = Inf, label = paste("Mean:", round(mean_excellentAssign, 2)), hjust = 1.1, vjust = 2, size = 4, color = "black") +
  annotate("text", x = Inf, y = Inf, label = paste("Median:", median_excellentAssign), hjust = 1.1, vjust = 1, size = 4, color = "black")
```

```{r}
#| title: Master Skills
# Calculate mean and median for masterSkills
mean_masterSkills <- mean(els$masterSkills, na.rm = TRUE)
median_masterSkills <- median(els$masterSkills, na.rm = TRUE)

# Create the bar graph for masterSkills
ggplot(els, aes(x = as.factor(masterSkills))) + 
  geom_bar(fill = "darkseagreen3", color = "darkseagreen3") +
  labs(title = "Bar Graph of Mastering Skills Scores", 
       x = "Mastering Skills Scores", 
       y = "Count") +
  geom_text(aes(label = ..count..), stat = 'count', position = position_stack(vjust = 0.5), color = "white") +
  annotate("text", x = Inf, y = Inf, label = paste("Mean:", round(mean_masterSkills, 2)), hjust = 1.1, vjust = 2, size = 4, color = "black") +
  annotate("text", x = Inf, y = Inf, label = paste("Median:", median_masterSkills), hjust = 1.1, vjust = 1, size = 4, color = "black")
```


```{r}
#| title: Stacked Bar Graph
els_long <- els %>%
  pivot_longer(
    cols = c(excellentTests, understandTexts, understandClass, excellentAssign, masterSkills),
    names_to = "ScoreType",
    values_to = "Scores"
  )
els_long_filtered <- els_long %>%
  filter(!is.na(Scores)) # Removes rows where Scores is NA

library(ggplot2)

ggplot(els_long_filtered, aes(x = ScoreType, fill = as.factor(Scores))) + 
  geom_bar(position = "stack") + 
  geom_text(stat = 'count', aes(label = ..count..), position = position_stack(vjust = 0.5), size = 3) +
  labs(title = "Frequency of Scores by Score Type", 
       x = "Score Type", 
       y = "Frequency") +
    scale_fill_brewer(palette = "Set4") +
    theme_minimal()
```
### Column
```{r pie chart}
#| title: Ethnicity Distribution
library(dplyr)
library(ggplot2)
library(tidyr) # Ensure tidyr is loaded for pivot_longer

# Calculate the total counts for each category
category_counts <- els %>%
  summarise(Asian = sum(Asian, na.rm = TRUE),
            Black = sum(Black, na.rm = TRUE),
            Hispanic = sum(Hispanic, na.rm = TRUE),
            Other = sum(Other, na.rm = TRUE)) %>%
  pivot_longer(cols = everything(), names_to = "Category", values_to = "Counts")

# Calculate percentages
total_counts <- sum(category_counts$Counts)
category_counts <- category_counts %>%
  mutate(Percentage = Counts / total_counts * 100)

ggplot(category_counts, aes(x = "", y = Counts, fill = Category)) +
  geom_bar(width = 1, stat = "identity", color = "white") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste(Category, ": ", Counts, " (", sprintf("%.1f%%", Percentage), ")", sep = "")),
            position = position_stack(vjust = 0.5)) +
  labs(title = "Distribution of Ethnicity", x = NULL, y = NULL, fill = "Category") +
  scale_fill_brewer(palette = "Pastel1") +
  theme_void() +
  theme(legend.position = "none")
```


## Row 
### Column {.tabset width="70%"}

```{r Overall}
#| title: Overall Ratings 

```


```{r Grouped by Gender}
#| title: Ratings Grouped by Gender

library(ggplot2)
library(dplyr)
library(tidyr)
els_long <- els %>%
  pivot_longer(cols = c("excellentTests", "understandTexts", "understandClass", "excellentAssign", "masterSkills"),
               names_to = "Test", values_to = "Score") %>%
  mutate(Male = factor(Male, labels = c("Female", "Male")))
ggplot(els_long, aes(x = Test, fill = factor(Score), group = interaction(Test, Score, Male))) + 
  geom_bar(position = position_dodge(width = 0.9), stat = "count", aes(y = ..count..)) +
  geom_text(stat = 'count', aes(label = ..count.., y = ..count.., group = interaction(Test, Score, Male)),
            position = position_dodge(width = 0.9), vjust = -0.25,size=2.5) +
  facet_wrap(~Male, scales = "free_x") +
  labs(title = "Frequency of Scores by Test and Gender",
       x = "Test", y = "Frequency", fill = "Score") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Blues")
```

```{r Grouped by Ethnicity}
#| title: Ratings Grouped by Ethnicity
# grouped by ethnicity
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(patchwork)

# Assuming 'els' is your original dataset
# First, reshape the data
els_long <- els %>%
  pivot_longer(cols = c("excellentTests", "understandTexts", "understandClass", "excellentAssign", "masterSkills"),
               names_to = "Test", values_to = "Score")

# Add an Ethnicity column based on the binary flags
els_long <- els_long %>%
  mutate(Ethnicity = case_when(
    Asian == 1 ~ "Asian",
    Black == 1 ~ "Black",
    Hispanic == 1 ~ "Hispanic",
    Other == 1 ~ "Other",
    TRUE ~ NA_character_ # Use NA for rows that do not match any condition
  )) %>%
  filter(!is.na(Ethnicity)) # Remove rows without a specified ethnicity

# Function to plot for a given ethnic group
plot_for_ethnic_group <- function(data, group) {
  filtered_data <- data %>% filter(Ethnicity == group)
  ggplot(filtered_data, aes(x = Test, fill = factor(Score), group = interaction(Test, Score))) + 
    geom_bar(position = position_dodge(width = 0.5), stat = "count", aes(y = ..count..)) +
    geom_text(stat = 'count', aes(label = ..count.., y = ..count.., group = interaction(Test, Score)),
              position = position_dodge(width = 0.5), vjust = -0.25, size = 1.5) +
    labs(title = paste("Frequency of Scores by Test among", group, "Students"),
         x = "Test", y = "Frequency", fill = "Score") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_brewer(palette = "Blues")
}

# Plot for each ethnic group
ethnic_groups <- c("Asian", "Black", "Hispanic", "Other")
plots <- lapply(ethnic_groups, function(group) plot_for_ethnic_group(els_long, group))


plot_asian <- plots[[1]]+
  theme(plot.title = element_text(size = 8), axis.title.x = element_text(size = 8), 
    axis.title.y = element_text(size = 8),legend.text = element_text(size = 8),legend.title = element_text(size = 8),legend.key.size = unit(0.3, "cm"))
plot_black <- plots[[2]]+
  theme(plot.title = element_text(size = 8), axis.title.x = element_text(size = 8), 
    axis.title.y = element_text(size = 8) ,legend.text = element_text(size = 8),legend.title = element_text(size = 8),legend.key.size = unit(0.3, "cm") )
plot_hispanic <- plots[[3]]+
  theme(plot.title = element_text(size = 8), axis.title.x = element_text(size = 8), 
    axis.title.y = element_text(size = 8),legend.text = element_text(size = 8),legend.title = element_text(size = 8),legend.key.size = unit(0.3, "cm")  )
plot_other <- plots[[4]]+
  theme(plot.title = element_text(size =8), axis.title.x = element_text(size = 8), 
    axis.title.y = element_text(size = 8),legend.text = element_text(size = 8) ,legend.title = element_text(size = 8),legend.key.size = unit(0.3, "cm") )

# Combine the plots
combined_plot <- plot_asian + plot_black + plot_hispanic + plot_other + 
  plot_layout(ncol = 2) # Arrange in 2 columns (adjust as needed)

combined_plot

ggsave("combined_ethnic_groups_plot.png", combined_plot, width = 20, height = 10) 

```
### Column {width = 30%}
```{r 2}
#| title: Gender Distribution
library(ggplot2)
# Pie Chart
ggplot(els, aes(x = "", fill = factor(Male))) + 
  geom_bar(width = 1, stat = "count") +
  coord_polar(theta = "y") +
  geom_text(aes(label = paste(round((..count..)/sum(..count..)*100, 1), "%")), 
            stat = 'count', position = position_stack(vjust = 0.5)) +
  scale_fill_manual(values = c("0" = "lightskyblue2", "1" = "mintcream"),
                    labels = c("Female", "Male"), name = "Gender") +
  labs(title = "Gender Distribution", x = NULL, y = NULL)

```

# HSLS
```{r}
data <- read_spss("/Users/nelliechen/Desktop/IDA/Data-Visualization/HSLS\ 2009\ 6.11.21.sav")
library(readr)

hsls <- data[, c("S2MTESTS", "S2MTEXTBOOK", "S2MSKILLS", "S2MASSEXCL", "X1SEX", "X1RACE", "X1HISPANIC", "X1WHITE", "X1BLACK", "X1ASIAN", "X1PACISLE", "X1SES")]
hsls_labs <- c("masterSkills", "excellentTests", "understandTexts", "excellentAssign", "Sex", "race", "Hispanic", "White", "Black", "Asian", "PacificIsland", "SES")
colnames(hsls) <- hsls_labs
hsls$Sex <- factor(hsls$Sex, levels = c(1, 2), labels = c("Male", "Female"))
```

## Row {height=40%}
### Column {.tabset width="70%"}
```{r}
hsls <- data[, c("S2MTESTS", "S2MTEXTBOOK", "S2MSKILLS", "S2MASSEXCL", "X1SEX", "X1RACE", "X1HISPANIC", "X1WHITE", "X1BLACK", "X1ASIAN", "X1PACISLE", "X1SES")]
hsls_labs <- c("masterSkills", "excellentTests", "understandTexts", "excellentAssign", "Sex", "race", "Hispanic", "White", "Black", "Asian", "PacificIsland", "SES")
colnames(hsls) <- hsls_labs

# 1. Draw bar graphs for specified columns
library(haven)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(patchwork)

# Load the dataset
data <- read_spss("/Users/nelliechen/Desktop/IDA/Data-Visualization/HSLS 2009 6.11.21.sav")

# Select relevant columns and rename them
hsls <- data[, c("S2MTESTS", "S2MTEXTBOOK", "S2MSKILLS", "S2MASSEXCL", "X1SEX", "X1RACE", "X1HISPANIC", "X1WHITE", "X1BLACK", "X1ASIAN", "X1PACISLE", "X1SES")]
hsls_labs <- c("masterSkills", "excellentTests", "understandTexts", "excellentAssign", "Sex", "race", "Hispanic", "White", "Black", "Asian", "PacificIsland", "SES")
colnames(hsls) <- hsls_labs

# 1. Draw bar graphs for specified columns
# Function to generate bar graphs with mean and median annotations
bar_graphs_with_mean_median <- function(data, column) {
  mean_value <- mean(data[[column]], na.rm = TRUE)
  median_value <- median(data[[column]], na.rm = TRUE)
  
  ggplot(data, aes(x = as.factor(get(column)))) + 
    geom_bar(fill = "darkseagreen3", color = "darkseagreen3") +
    labs(title = paste("Bar Graph of", column, "Scores"), 
         x = column, 
         y = "Count") +
    geom_text(aes(label = ..count..), stat = 'count', position = position_stack(vjust = 0.5), color = "white") +
    annotate("text", x = Inf, y = Inf, label = paste("Mean:", sprintf("%.2f", mean_value), "\nMedian:", median_value), hjust = 1.1, vjust = 1, size = 5, color = "black") +
    theme_minimal()
}
```

```{r}
#| title: Master Skilss
plot_masterSkills <- bar_graphs_with_mean_median(hsls, "masterSkills")
plot_masterSkills
```

```{r}
#| title: Excellent Tests
plot_excellentTests <- bar_graphs_with_mean_median(hsls, "excellentTests")
plot_excellentTests
```

```{r}
#| title: Understand Texts
plot_understandTexts <- bar_graphs_with_mean_median(hsls, "understandTexts")
plot_understandTexts
```

```{r}
#| title: Excellent Assignment
plot_excellentAssign <- bar_graphs_with_mean_median(hsls, "excellentAssign")
plot_excellentAssign
```

```{r}
#| title: Stacked Bar Graph
hsls_long <- hsls %>%
  pivot_longer(cols = c("masterSkills", "excellentTests", "understandTexts", "excellentAssign"),
               names_to = "ScoreType", values_to = "Scores")

ggplot(hsls_long, aes(x = ScoreType, fill = as.factor(Scores))) + 
  geom_bar(position = "stack") + 
  labs(title = "Stacked Frequency of Scores by Score Type", 
       x = "Score Type", 
       y = "Frequency") +
  scale_fill_brewer(palette = "Set4") +
  theme_minimal()
```

### Column
```{r}
#| title: ethnicity distribution
ethnicity_counts <- hsls %>%
  summarise(Hispanic = sum(Hispanic, na.rm = TRUE),
            White = sum(White, na.rm = TRUE),
            Black = sum(Black, na.rm = TRUE),
            Asian = sum(Asian, na.rm = TRUE),
            PacificIsland = sum(PacificIsland, na.rm = TRUE)) %>%
  pivot_longer(cols = everything(), names_to = "Ethnicity", values_to = "Counts")

# Calculate percentages for each ethnicity
ethnicity_counts <- ethnicity_counts %>%
  mutate(Percentage = Counts / sum(Counts) * 100)

ggplot(ethnicity_counts, aes(x = "", y = Percentage, fill = Ethnicity)) +
  geom_bar(width = 1, stat = "identity", color = "white") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste(Ethnicity, sprintf("%.1f%%", Percentage))), position = position_stack(vjust = 0.5)) +
  labs(title = "Ethnicity Distribution", x = NULL, y = NULL) +
  scale_fill_brewer(palette = "Pastel1") +
  theme_void()
```


## Row
### Column{.tabset width="70%"}
```{r}
#| title: Ratings Grouped by Gender
library(ggplot2)
library(dplyr)
library(tidyr)

# Assuming hsls has been loaded and prepared with necessary columns
# Reshape the hsls data to long format and remove rows with NA in Score
# Reshape the hsls data to long format and filter out rows where Sex is NA
hsls_long <- hsls %>%
  pivot_longer(cols = c("masterSkills", "excellentTests", "understandTexts", "excellentAssign"),
               names_to = "Test", values_to = "Score") %>%
  mutate(Sex = factor(Sex, labels = c("Female", "Male"))) %>%
  filter(!is.na(Sex)) # This line removes rows where Sex is NA

# Plot the frequencies of scores by test and gender, excluding NAs for gender
ggplot(hsls_long, aes(x = Test, fill = factor(Score), group = interaction(Test, Score, Sex))) + 
  geom_bar(position = position_dodge(width = 0.9), stat = "count", aes(y = ..count..)) +
  geom_text(stat = 'count', aes(label = ..count.., y = ..count.., group = interaction(Test, Score, Sex)),
            position = position_dodge(width = 0.9), vjust = -0.25, size=2.5) +
  facet_wrap(~Sex, scales = "free_x") +
  labs(title = "Frequency of Scores by Test and Gender",
       x = "Test", y = "Frequency", fill = "Score") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Blues")

```

```{r}
#| title: Ratings Grouped by Ethnicity
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(patchwork)

# Assuming 'hsls' is already loaded and contains relevant columns

# Reshape the hsls data
hsls_long <- hsls %>%
  pivot_longer(cols = c("masterSkills", "excellentTests", "understandTexts", "excellentAssign"),
               names_to = "Test", values_to = "Score") %>%
  mutate(Ethnicity = case_when(
    Hispanic > 0 ~ "Hispanic",
    White > 0 ~ "White",
    Black > 0 ~ "Black",
    Asian > 0 ~ "Asian",
    PacificIsland > 0 ~ "Pacific Islander",
    TRUE ~ "Other"
  )) %>%
  filter(!is.na(Ethnicity)) # Ensure we have specified ethnicity

# Function to plot for a given ethnic group
plot_for_ethnic_group <- function(data, group) {
  filtered_data <- data %>% filter(Ethnicity == group)
  ggplot(filtered_data, aes(x = Test, fill = factor(Score), group = interaction(Test, Score))) + 
    geom_bar(position = position_dodge(width = 0.5), stat = "count", aes(y = ..count..)) +
    geom_text(stat = 'count', aes(label = ..count.., y = ..count.., group = interaction(Test, Score)),
              position = position_dodge(width = 0.5), vjust = -0.25, size = 3) +
    labs(title = paste("Frequency of Scores by Test among", group, "Students"),
         x = "Test", y = "Frequency", fill = "Score") +
    theme_minimal() +
    theme(plot.title = element_text(size = 4), 
          axis.title.x = element_text(size = 6),
          axis.title.y = element_text(size = 6),
          legend.text = element_text(size = 6),
          legend.title = element_text(size = 6),
          legend.key.size = unit(0.3, "cm"),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_brewer(palette = "Blues")
}

# Generate plots for each ethnic group
ethnic_groups <- c("Hispanic", "White", "Black", "Asian", "Pacific Islander", "Other")
plots <- lapply(ethnic_groups, function(group) plot_for_ethnic_group(hsls_long, group))

# Combine the plots into a single layout
combined_plot <- wrap_plots(plots, ncol = 3, nrow=2) # Adjust as needed based on the number of plots

# Print the combined plot
print(combined_plot)

# Save the combined plot to a file
ggsave("combined_ethnic_groups_plot.pdf", combined_plot, width = 20, height = 10)

```



### Column
```{r}
#| title: Gender Distribution
hsls$Sex <- factor(hsls$Sex, labels = c("Male", "Female"))

ggplot(hsls, aes(x = "", fill = Sex)) + 
  geom_bar(width = 1, stat = "count") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste(round((..count..)/sum(..count..)*100, 1), "%")), 
            stat = 'count', position = position_stack(vjust = 0.5)) +
  labs(title = "Gender Distribution", x = NULL, y = NULL) +
  theme_void() +
  scale_fill_brewer(palette = "Blues")

```